@page "/signup"
@using IMGNCar.Components.Layout
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@layout EmptyLayout
@inject HttpClient Http
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Sign Up</PageTitle>

<div class="container d-flex flex-column justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="card shadow-sm" style="max-width: 60%; width: 100%;">
        <div class="card-body p-4">
            <!-- Logo -->
            <div class="text-center mb-4">
                <img src="Media/logo.png" alt="Logo" style="max-height: 80px;" />
            </div>

            <h3 class="card-title text-center mb-4">Create Account</h3>

            @if (showSuccessMessage)
            {
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    Account created successfully! Redirecting to login...
                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }


            <EditForm Model="@newUser" OnValidSubmit="HandleSignUp">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger small" />

                <div class="mb-3">
                    <label class="form-label">Username</label>
                    <InputText class="form-control" @bind-Value="newUser.Username" />
                    <ValidationMessage For="@(() => newUser.Username)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText type="password" class="form-control" @bind-Value="newUser.Password" />
                    <ValidationMessage For="@(() => newUser.Password)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText type="email" class="form-control" @bind-Value="newUser.Email" />
                    <ValidationMessage For="@(() => newUser.Email)" class="text-danger small" />
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">First Name</label>
                        <InputText class="form-control" @bind-Value="newUser.FirstName" />
                        <ValidationMessage For="@(() => newUser.FirstName)" class="text-danger small" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Last Name</label>
                        <InputText class="form-control" @bind-Value="newUser.LastName" />
                        <ValidationMessage For="@(() => newUser.LastName)" class="text-danger small" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Phone Number</label>
                    <InputText class="form-control" @bind-Value="newUser.PhoneNumber" />
                    <ValidationMessage For="@(() => newUser.PhoneNumber)" class="text-danger small" />
                </div>

                <div class="mb-4">
                    <label class="form-label">Date of Birth</label>
                    <InputDate class="form-control" @bind-Value="newUser.DateOfBirth" />
                    <ValidationMessage For="@(() => newUser.DateOfBirth)" class="text-danger small" />
                </div>

                <div class="d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-outline-secondary" @onclick='() => NavManager.NavigateTo("/login")'>
                        Back to Login
                    </button>
                    <button type="submit" class="btn btn-primary">
                        Sign Up
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private NewUser newUser = new();
    private string errorMessage = "";
    private bool showSuccessMessage = false;

    private async Task HandleSignUp()
    {
        Console.WriteLine("DEBUG: HandleSignUp triggered.");
        try
        {
            // Reset messages
            showSuccessMessage = false;
            errorMessage = "";
            // Copy the plain password to PasswordHash so that the API receives it.
            newUser.PasswordHash = newUser.Password;
            // Optionally convert DateOfBirth to UTC if required by API.
            newUser.DateOfBirth = newUser.DateOfBirth?.ToUniversalTime();

            var response = await Http.PostAsJsonAsync("http://localhost:5087/api/users", newUser);
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine("DEBUG: API response: " + responseContent);

            if (response.IsSuccessStatusCode)
            {
                showSuccessMessage = true;
                StartRedirectTimer();
            }
            else
            {
                errorMessage = $"Sign up failed. Status: {response.StatusCode}, Message: {responseContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine("DEBUG: Exception: " + ex.Message);
        }
    }

    private void StartRedirectTimer()
    {
        var timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                NavManager.NavigateTo("/login");
                StateHasChanged();
            });
        }, null, 3000, Timeout.Infinite); // Redirect after 3 seconds
    }

    public class NewUser
    {
        [Required(ErrorMessage = "Username is required.")]
        [MaxLength(50)]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [MaxLength(255)]
        public string Password { get; set; } = "";

        // This property must be set in code (in HandleSignUp)
        public string PasswordHash { get; set; } = "";

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        [MaxLength(100)]
        public string Email { get; set; } = "";


        [Required(ErrorMessage = "Phone Number is required.")]
        [MaxLength(20)]
        public string PhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "First name is required.")]
        [MaxLength(50)]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Last name is required.")]
        [MaxLength(50)]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Date is required.")]
        public DateTime? DateOfBirth { get; set; }
    }
}
