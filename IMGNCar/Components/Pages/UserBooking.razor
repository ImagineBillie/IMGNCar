@page "/user/booking"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Booked</PageTitle>

<!-- Bookings Table -->
<div class="mb-4 pb-5">
    <h1 class="mb-5">Your Bookings</h1>
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Car Details</th>
                <th>Pickup Date</th>
                <th>Return Date</th>
                <th>Total Price</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in bookings)
            {
                var car = cars.FirstOrDefault(c => c.CarId == booking.CarId);

                <tr>
                    <td>
                        @if (car != null)
                        {
                            <div>
                                <strong>@car.Make @car.Model</strong><br>
                                @car.Year | @car.Category | @car.TransmissionType
                            </div>
                        }
                        else
                        {
                            <span class="text-muted">Car details unavailable</span>
                        }
                    </td>
                    <td>@booking.PickupDatetime.ToString("dd MMM yyyy")</td>
                    <td>@booking.DropoffDatetime.ToString("dd MMM yyyy")</td>
                    <td>RM @booking.TotalRentalPrice</td>
                    <td>
                        <span class="badge @GetStatusBadgeClass(booking.BookingStatus)">
                            @booking.BookingStatus
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Car> cars = new();
    private List<Booking> bookings = new();
    private Car? selectedCar;
    private Booking? selectedBooking;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cars = await Http.GetFromJsonAsync<List<Car>>("http://localhost:5087/api/cars") ?? new();
            bookings = await Http.GetFromJsonAsync<List<Booking>>("http://localhost:5087/api/bookings") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "confirmed" => "bg-success",
            "pending" => "bg-warning",
            "cancelled" => "bg-danger",
            "completed" => "bg-primary",
            _ => "bg-secondary"
        };
    }


    // Model Classes (FIXED TYPES)
    public class Car
    {
        public int CarId { get; set; }
        public string Make { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public int Year { get; set; }
        public string Category { get; set; } = string.Empty;
        public string TransmissionType { get; set; } = string.Empty;
        public bool AvailabilityStatus { get; set; }
        public decimal DailyRate { get; set; }
    }


    public class Booking
    {
        public int BookingId { get; set; }
        public int UserId { get; set; }
        public int CarId { get; set; }
        public string PickupLocation { get; set; } = string.Empty;
        public DateTime PickupDatetime { get; set; }
        public string DropoffLocation { get; set; } = string.Empty;
        public DateTime DropoffDatetime { get; set; }
        public string BookingDate { get; set; } = string.Empty;
        public int RentalDays { get; set; }
        public decimal TotalRentalPrice { get; set; }
        public string BookingStatus { get; set; } = string.Empty;
        public string CreatedAt { get; set; } = string.Empty;
        public string UpdatedAt { get; set; } = string.Empty;
    }
}

<style>
    .modal {
        backdrop-filter: blur(2px);
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
        cursor: pointer;
    }

    .list-group-item.active {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    h1, h2, h3 {
        color: #1588c4;
        font-weight: 600;
    }
</style>