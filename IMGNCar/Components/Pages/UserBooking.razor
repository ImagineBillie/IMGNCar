@page "/user/booking"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Booked</PageTitle>

<!-- Bookings Table -->
<div class="mb-4 pb-5">
    <h1 class="mb-5">Your Bookings</h1>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Car Details</th>
                <th>Pickup Date</th>
                <th>Return Date</th>
                <th>Total Price</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in bookings.Where(b => b.UserId == 2))
            {
                var car = cars.FirstOrDefault(c => c.CarId == booking.CarId);
                var canCancel = new[] { "Pending", "Confirmed" }.Contains(booking.BookingStatus);

                <tr>
                    <td>
                        @if (car != null)
                        {
                            <div>
                                <strong>@car.Make @car.Model</strong><br>
                                @car.Year | @car.Category | @car.TransmissionType
                            </div>
                        }
                        else
                        {
                            <span class="text-muted">Car details unavailable</span>
                        }
                    </td>
                    <td>@booking.PickupDatetime.ToString("dd MMM yyyy")</td>
                    <td>@booking.DropoffDatetime.ToString("dd MMM yyyy")</td>
                    <td>RM @booking.TotalRentalPrice.ToString("N2")</td>
                    <td>
                        <span class="badge @GetStatusBadgeClass(booking.BookingStatus)">
                            @booking.BookingStatus
                        </span>
                    </td>
                    <td>@DateTime.Parse(booking.CreatedAt).ToString("dd MMM yyyy")</td>
                    <td>
                        <button class="btn btn-sm btn-danger"
                                @onclick="() => ShowCancelModal(booking)"
                                disabled="@(!CanCancel(booking.BookingStatus))">
                            Cancel
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Cancel Confirmation Modal -->
@if (showCancelModal)
{
    <div class="modal" style="display: block; background-color: rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Cancellation</h5>
                </div>
                <div class="modal-body">
                    Are you sure you want to cancel this booking?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseCancelModal">No</button>
                    <button class="btn btn-danger" @onclick="ConfirmCancellation">Yes, Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Car> cars = new();
    private List<Booking> bookings = new();
    private string? errorMessage;
    private string? successMessage;
    private bool showCancelModal = false;
    private Booking? bookingToCancel;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cars = await Http.GetFromJsonAsync<List<Car>>("http://localhost:5087/api/cars") ?? new();
            var allBookings = await Http.GetFromJsonAsync<List<Booking>>("http://localhost:5087/api/bookings") ?? new();
            bookings = allBookings.Where(b => b.UserId == 2).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private void ShowCancelModal(Booking booking)
    {
        bookingToCancel = booking;
        showCancelModal = true;
    }

    private void CloseCancelModal()
    {
        showCancelModal = false;
        bookingToCancel = null;
    }

    private async Task ConfirmCancellation()
    {
        if (bookingToCancel == null) return;

        try
        {
            // Update the booking status
            bookingToCancel.BookingStatus = "Cancelled";
            bookingToCancel.UpdatedAt = DateTime.UtcNow.ToString("o");

            // Send PUT request to update the booking
            var response = await Http.PutAsJsonAsync(
                $"http://localhost:5087/api/bookings/{bookingToCancel.BookingId}",
                bookingToCancel
            );

            if (response.IsSuccessStatusCode)
            {
                // Update local state
                var index = bookings.FindIndex(b => b.BookingId == bookingToCancel.BookingId);
                if (index != -1)
                {
                    bookings[index] = bookingToCancel;
                }
                successMessage = "Booking cancelled successfully!";
                showCancelModal = false;
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to cancel booking. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error cancelling booking: {ex.Message}";
        }
    }

    // Update the canCancel check to use correct status values
    private bool CanCancel(string status)
    {
        return status.Equals("Pending", StringComparison.OrdinalIgnoreCase) ||
               status.Equals("Confirmed", StringComparison.OrdinalIgnoreCase);
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "confirmed" => "bg-success",
            "pending" => "bg-warning",
            "cancelled" => "bg-danger",
            "completed" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    // Model Classes (FIXED TYPES)
    public class Car
    {
        public int CarId { get; set; }
        public string Make { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public int Year { get; set; }
        public string Category { get; set; } = string.Empty;
        public string TransmissionType { get; set; } = string.Empty;
        public bool AvailabilityStatus { get; set; }
        public decimal DailyRate { get; set; }
    }


    public class Booking
    {
        public int BookingId { get; set; }
        public int UserId { get; set; }
        public int CarId { get; set; }
        public string PickupLocation { get; set; } = string.Empty;
        public DateTime PickupDatetime { get; set; }
        public string DropoffLocation { get; set; } = string.Empty;
        public DateTime DropoffDatetime { get; set; }
        public string BookingDate { get; set; } = string.Empty;
        public int RentalDays { get; set; }
        public decimal TotalRentalPrice { get; set; }
        public string BookingStatus { get; set; } = string.Empty;
        public string CreatedAt { get; set; } = string.Empty;
        public string UpdatedAt { get; set; } = string.Empty;
    }
}

<style>
    .modal {
        backdrop-filter: blur(2px);
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
        cursor: pointer;
    }

    .list-group-item.active {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    h1, h2, h3 {
        color: #1588c4;
        font-weight: 600;
    }
</style>