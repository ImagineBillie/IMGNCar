@page "/admin/cars"
@layout AdminLayout
@rendermode InteractiveServer
@using IMGNCar.Components.Layout
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Cars Dashboard</PageTitle>

<div class="container py-5">
    <h1 class="mb-4" style="padding-left:15px"><u>Car list</u></h1>

    <div class="row">
        <div class="col-md-12 p-4">
            <div class="mb-3">
                <button class="btn btn-primary" @onclick="ShowAddModal">Add New Car</button>
            </div>

            <!-- Messages -->
            @if (successMessage != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                </div>
            }
            @if (errorMessage != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                </div>
            }

            <!-- Cars Table -->
            <div class="mb-4">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Make</th>
                            <th>Model</th>
                            <th>Year</th>
                            <th>Category</th>
                            <th>Transmission</th>
                            <th>Availability</th>
                            <th>Daily Rate</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var car in cars)
                        {
                            <tr>
                                <td>@car.CarId</td>
                                <td>@car.Make</td>
                                <td>@car.Model</td>
                                <td>@car.Year</td>
                                <td>@car.Category</td>
                                <td>@car.TransmissionType</td>
                                <td>@(car.AvailabilityStatus ? "✅ Available" : "⛔ Booked")</td>
                                <td>RM @car.DailyRate</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="@(() => ShowEditModal(car))">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="@(() => ShowDeleteModal(car))">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Car Modal -->
@if (showAddModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Car</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Make*</label>
                                <input class="form-control" @bind="newCar.Make" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Model*</label>
                                <input class="form-control" @bind="newCar.Model" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Year*</label>
                                <input type="number" class="form-control" @bind="newCar.Year" min="1900" max="@(DateTime.Now.Year + 1)" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Category*</label>
                                <input class="form-control" @bind="newCar.Category" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Transmission*</label>
                                <input class="form-control" @bind="newCar.TransmissionType" required />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Passengers*</label>
                                <input type="number" class="form-control" @bind="newCar.NumberOfPassengers" min="1" max="9" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Bags*</label>
                                <input type="number" class="form-control" @bind="newCar.NumberOfBags" min="1" max="6" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Color*</label>
                                <input class="form-control" @bind="newCar.Color" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Mileage</label>
                                <input type="number" class="form-control" @bind="newCar.Mileage" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Registration Number*</label>
                                <input class="form-control" @bind="newCar.RegistrationNumber" required />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Daily Rate*</label>
                                <input type="number" step="0.01" class="form-control" @bind="newCar.DailyRate" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Image</label>
                                <InputFile class="form-control"
                                           OnChange="HandleImageUpload"
                                           accept="image/*"
                                           maxAllowedSize="5242880" /> <!-- 5MB -->
                                @if (!string.IsNullOrEmpty(newCar.ImageUrl))
                                {
                                    <div class="mt-2">
                                        <img src="/Media/Cars/@newCar.ImageUrl" class="img-thumbnail" style="max-height: 100px" />
                                        <div class="text-muted small">@newCar.ImageUrl</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" @bind="newCar.AvailabilityStatus" />
                        <label class="form-check-label">Available</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAddModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="AddCar">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Car Modal -->
@if (showEditModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Car</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Make*</label>
                                <input class="form-control" @bind="editCar.Make" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Model*</label>
                                <input class="form-control" @bind="editCar.Model" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Year*</label>
                                <input type="number" class="form-control" @bind="editCar.Year" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Category*</label>
                                <input class="form-control" @bind="editCar.Category" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Transmission*</label>
                                <input class="form-control" @bind="editCar.TransmissionType" required />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Passengers*</label>
                                <input type="number" class="form-control" @bind="editCar.NumberOfPassengers" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Bags*</label>
                                <input type="number" class="form-control" @bind="editCar.NumberOfBags" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Color*</label>
                                <input class="form-control" @bind="editCar.Color" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Mileage</label>
                                <input type="number" class="form-control" @bind="editCar.Mileage" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Registration Number*</label>
                                <input class="form-control" @bind="editCar.RegistrationNumber" required />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Daily Rate*</label>
                                <input type="number" step="0.01" class="form-control" @bind="editCar.DailyRate" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Image</label>
                                <InputFile class="form-control"
                                           OnChange="HandleEditImageUpload"
                                           accept="image/*"
                                           maxAllowedSize="5242880" /> <!-- 5MB -->
                                @if (!string.IsNullOrEmpty(editCar.ImageUrl))
                                {
                                    <div class="mt-2">
                                        <img src="/Media/Cars/@editCar.ImageUrl" class="img-thumbnail" style="max-height: 100px" />
                                        <div class="text-muted small">@editCar.ImageUrl</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" @bind="editCar.AvailabilityStatus" />
                        <label class="form-check-label">Available</label>
                    </div>
                    <input type="hidden" @bind="editCar.CarId" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="EditCar">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Car</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete @carToDelete?.Make @carToDelete?.Model?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteCar">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Car> cars = new();
    private string? errorMessage;
    private string? successMessage;

    // Add Car
    private bool showAddModal = false;
    private Car newCar = new();

    // Edit Car
    private bool showEditModal = false;
    private Car editCar = new();

    // Delete Car
    private bool showDeleteModal = false;
    private Car? carToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task LoadCars()
    {
        try
        {
            cars = await Http.GetFromJsonAsync<List<Car>>("http://localhost:5087/api/cars") ?? new();
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private void ShowAddModal() => showAddModal = true;
    private void CloseAddModal() => showAddModal = false;

    private void ShowEditModal(Car car)
    {
        editCar = new Car
            {
                CarId = car.CarId,
                Make = car.Make,
                Model = car.Model,
                Year = car.Year,
                Category = car.Category,
                TransmissionType = car.TransmissionType,
                NumberOfPassengers = car.NumberOfPassengers,
                NumberOfBags = car.NumberOfBags,
                Color = car.Color,
                Mileage = car.Mileage,
                RegistrationNumber = car.RegistrationNumber,
                AvailabilityStatus = car.AvailabilityStatus,
                DailyRate = car.DailyRate,
                ImageUrl = car.ImageUrl
            };
        showEditModal = true;
    }

    private void CloseEditModal() => showEditModal = false;

    private void ShowDeleteModal(Car car)
    {
        carToDelete = car;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        carToDelete = null;
    }

    private async Task AddCar()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5087/api/cars", newCar);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Car added successfully!";
                errorMessage = null;
                newCar = new Car(); // Reset form
                await LoadCars();
                CloseAddModal();
                StartMessageTimer();
            }
            else
            {
                errorMessage = $"Error adding car: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding car: {ex.Message}";
        }
    }

    private async Task EditCar()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"http://localhost:5087/api/cars/{editCar.CarId}", editCar);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Car updated successfully!";
                errorMessage = null;
                await LoadCars();
                CloseEditModal();
                StartMessageTimer();
            }
            else
            {
                errorMessage = $"Error updating car: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating car: {ex.Message}";
        }
    }

    private async Task DeleteCar()
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5087/api/cars/{carToDelete?.CarId}");
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Car deleted successfully!";
                errorMessage = null;
                await LoadCars();
                CloseDeleteModal();
                StartMessageTimer();
            }
            else
            {
                errorMessage = $"Error deleting car: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting car: {ex.Message}";
        }
    }

    private void StartMessageTimer()
    {
        var timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                successMessage = null;
                errorMessage = null;
                StateHasChanged();
            });
        }, null, 5000, Timeout.Infinite);
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null && file.Size > 0)
            {
                // Generate unique filename
                var extension = Path.GetExtension(file.Name);
                var fileName = $"{Guid.NewGuid()}{extension}";
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
                if (!allowedExtensions.Contains(extension.ToLower()))
                {
                    errorMessage = "Only image files (JPG, PNG, GIF) are allowed";
                    return;
                }
                // Define save path
                var folderPath = Path.Combine(Environment.WebRootPath, "Media", "Cars");
                Directory.CreateDirectory(folderPath); // Ensure directory exists
                var fullPath = Path.Combine(folderPath, fileName);

                // Save the file
                using (var stream = new FileStream(fullPath, FileMode.Create))
                {
                    await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(stream);
                }

                // Update the car object
                if (showAddModal)
                    newCar.ImageUrl = fileName;
                else
                    editCar.ImageUrl = fileName;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error uploading image: {ex.Message}";
        }
    }
    private async Task HandleEditImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null && file.Size > 0)
            {
                // Delete old image if exists
                if (!string.IsNullOrEmpty(editCar.ImageUrl))
                {
                    var oldPath = Path.Combine(Environment.WebRootPath, "Media", "Cars", editCar.ImageUrl);
                    if (File.Exists(oldPath))
                    {
                        File.Delete(oldPath);
                    }
                }

                // Generate and save new image
                var extension = Path.GetExtension(file.Name);
                var fileName = $"{Guid.NewGuid()}{extension}";
                var folderPath = Path.Combine(Environment.WebRootPath, "Media", "Cars");
                Directory.CreateDirectory(folderPath);
                var fullPath = Path.Combine(folderPath, fileName);

                using (var stream = new FileStream(fullPath, FileMode.Create))
                {
                    await file.OpenReadStream().CopyToAsync(stream);
                }

                editCar.ImageUrl = fileName;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error uploading image: {ex.Message}";
        }
    }

    public class Car
    {
        public int CarId { get; set; }
        public string Make { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public int Year { get; set; }
        public string Category { get; set; } = string.Empty;
        public string TransmissionType { get; set; } = string.Empty;
        public byte NumberOfPassengers { get; set; }
        public byte NumberOfBags { get; set; }
        public string Color { get; set; } = string.Empty;
        public int Mileage { get; set; }
        public string RegistrationNumber { get; set; } = string.Empty;
        public bool AvailabilityStatus { get; set; }
        public decimal DailyRate { get; set; }
        public string ImageUrl { get; set; } = string.Empty;
    }
}

<style>
    .modal {
        backdrop-filter: blur(2px);
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
        cursor: pointer;
    }

    .list-group-item.active {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
</style>